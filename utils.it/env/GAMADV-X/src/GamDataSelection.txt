GAM4 has extended how collections of objects can be selected.

GAM commands fall into two broad categories based on the format of the command line.
gam <Objects> <Command> <Arguments>
gam <Command> <ObjectType> <Objects> <Arguments>

In the first form, <Objects> represents ChromeOS devices or objects that will yield a list of Users,
e.g., an individual user, a Group or an Organizational Unit.
The end result is either a list of ChromeOS devices or a list of Users.

In the second form, <ObjectType> <Objects> yields a list of the following types of objects:
	Aliases
	Calendars
	Contacts
	Courses
	ChromeOS Devices
	Drive Files
	Groups
	Mobile Devices
	Organizational Units
	Printers
	Print Jobs
	Resource Calendars
	Schemas
	Users

A third form for selecting collections of objects is used in three print commands.
	gam print users ... select <Objects> ...
	gam print groups ... select <Objects> ...
	gam print group-members ... select <Objects> ...

In the syntax descriptions below, [charset <Charset>] allows you to specify the character set of
the data to be read from a file. <Charset> defaults to ascii; other typical values are: utf-8, utf-16, latin-1.
In various contexts, an item or a list of items is allowed, [delimiter <String>] indicates that a list of items,
separated by <String> (typically a comma or space), is to be processed.

These BNF definitions will be used in this document.

<FileEntity> ::= file <FileName> [charset <String>] [delimiter <String>]
<CSVkmdEntity> ::= csvkmd <FileName> [charset <String>]
			keyfield <FieldName> [delimiter <String>]
			[matchfield <FieldName> <RegularExpressionPattern>]
			[datafield <FieldName> [delimiter <String>]]

<CourseAlias> ::= <String>
<CourseID> ::= <Number>|d:<CourseAlias>
A single Course is specified by an id of this form: 270706834, or an alias of this form: d:Math101
<CourseIDList> ::= "<CourseID>(,<CourseID>)*"

<DeviceID> ::= <String>
A single ChromeOS device is specified by an id of this form: 01b7e202-0e5c-4ec5-b19b-b0a884c01eac
<CrOSList> ::= "<DeviceID>(,<DeviceID>)*"

<UserItem> ::= <EmailAddress>|<UniqueID>|<String>
A single User is specified by an email address (user@example.com), a Google Unique ID (uid:100257245150640561666)
or the local part of an email address (user).
<UserList> ::= "<UserItem>(,<UserItem>)*"

<GroupItem> ::= <EmailAddress>|<UniqueID>|<String>
A single Group is specified by an email address (group@example.com), a Google Unique ID (uid:02nusc192mgyuk3)
or the local part of an email address (group).
<GroupList> ::= "<GroupItem>(,<GroupItem>)*"
<GroupEntity> ::= <GroupList>|<FileEntity>|<CSVkmdEntity>

<OrgUnitPath> ::= /|(/<String)+
A single Organizational Unit is specified by a path (/Faculty/English).
<OrgUnitList> ::== "<OrgUnitPath>(,<OrgUnitPath>)*"
<OrgUnitEntity> ::= <OrgUnitList>|<FileEntity>|<CSVkmdEntity>

*****
First Form ChromeOS Devices
*****

<CrOSTypeEntity> ::=
		(all cros)|
		(cros <CrOSList>)|
		(crosfile <FileName> [charset <Charset>] [delimiter <String>])|
		(croscsvfile <FileName>:<FieldName> [charset <Charset>] [delimiter <String>])|
		(crosquery <QueryCrOS>)|
		(cros_ou|cros_org <OrgUnitPath)|
		(cros_ou_and_children|cros_org_and_children <OrgUnitPath)|
		(cros_ous|cros_orgs <OrgUnitList)|
		(cros_ous_and_children|cros_orgs_and_children <OrgUnitList)|
		(datafile cros <FileName> [charset <Charset>] [delimiter <String>])|
		(csvkmd cros <FileName> [charset <Charset>]
			keyfield <FieldName> [delimiter <String>]
			[matchfield <FieldName> <RegularExpression>]
			[datafield <FieldName> [delimiter <String>]])|
		(csvcros <FieldName>)

Selection: all cros
Yields: All ChromeOS devices in the account

Selection: cros <CrOSList>
Note: <CrOSList> is a comma separated list of DeviceIDs surrounded by " (a single command line argument).
Yields: A list of ChromeOS devices.
Example: cros "0c4ec369-b128-4b4d-aec2-ec283f849999,0cbe9368-402d-41c3-b75b-175481589999"

Selection: crosfile <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
If delimiter <String> is specified, each row can contain a list of items separated by <String>, typically comma or space.
Yields: A list of ChromeOS devices.
Example: crosfile CrOSFile.lst
CrOSFile.lst contains:
0c4ec369-b128-4b4d-aec2-ec283f849999
0cbe9368-402d-41c3-b75b-175481589999
...

Selection: croscsvfile <FileName>:<FieldName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a CSV file with a header row; <FieldName> specifies the column containing the desired data.
If delimiter <String> is specified, each the specified column in each row can contain a list of items spearated by <String>, typically comma or space.
Yields: A list of ChromeOS devices.
Example: croscsvfile CrOSFile.csv:deviceId
CrOSFile.csv contains:
deviceId
0c4ec369-b128-4b4d-aec2-ec283f849999
0cbe9368-402d-41c3-b75b-175481589999
...

Selection: crosquery <Query>
Note: <Query> should be surrounded by ", ' should be used to enclose items within <Query>.
Yields: All ChromeOS devices that satisfy the query.
Example: query "id:HY3"
See: https://support.google.com/chrome/a/answer/1698333?hl=en

Selection: cros_ou|cros_org <OrgUnitPath>
Note: <OrgUnitPath> should be enclosed in " if it contains spaces.
Yields: All ChromeOS devices directly in the Organizational Unit. 
Example: cros_org "/Staff/New York"

Selection: cros_ou_and_children|cros_org_and_children <OrgUnitPath>
Note: <OrgUnitPath> should be enclosed in " if it contains spaces.
Yields: All ChromeOS devices in the Organizational Unit and any sub units.
Example: cros_org_and_children /Staff

Selection: cros_ous|cros_orgs <OrgUnitList>
Note: <OrgUnitList> is a comma separated list of <OrgUnitPath> surrounded by " (a single command line argument).
An individual <OrgUnitPath> should be surrounded by " if it contains spaces.
Yields: All ChromeOS devices  directly in the Organizational Units. 
Example: cros_orgs "'/Staff/New York','/Staff/New Jersey'"

Selection: cros_ous_and_children|cros_orgs_and_children <OrgUnitList>
Note: <OrgUnitList> is a comma separated list of <OrgUnitPath> surrounded by " (a single command line argument).
An individual <OrgUnitPath> should be surrounded by ' if it contains spaces.
Yields: All ChromeOS deices in the Organizational Units and their sub units. 
Example: cros_orgs_and_children "'/Staff/New York','/Staff/New Jersey'"

Selection: datafile cros <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
Yields: A list of ChromeOS devices.
Example: datafile cros CrOSFile.lst
CrOSFile.lst contains:
0c4ec369-b128-4b4d-aec2-ec283f849999
0cbe9368-402d-41c3-b75b-175481589999
...

Selection: csvkmd cros <FileName> [charset <Charset>]
		keyfield <FieldName> [delimiter <String>]
		[matchfield <FieldName> <RegularExpression>]
		[datafield <FieldName> [delimiter <String>]]
Note: <FileName> specifies a CSV file, <FieldName> is a column header in the first row.
Yields: A list of ChromeOS devices.
The columns are separated by commas. If a keyfield or datafield contains multiple values,
delimiter <String> specifies the character that separates the values within a column.
The keyfield <FieldName> column contains ChromeOS DeviceIDs.
The matchfield <FieldName> column contains data that may be used to select a subset of the rows in the CSV file.
The datafield <FieldName> column selects data that will be used elsewhere in the command.
<RegularExpression> is a Python regular expression, see: https://docs.python.org/2/library/re.html

Example: csvkmd cros CrOSFile.csv keyfield DeviceID matchfield Model Samsung
CrOSFile.csv contains:
Model,DeviceID
Samsung,0c4ec369-b128-4b4d-aec2-ec283f849999
HP,0cbe9368-402d-41c3-b75b-175481589999
...

Example: csvkmd CrOSFile.csv keyfield DeviceIDs delimiter " " matchfield Office "Sales-.*"
CrOSFile.csv contains:
Office,DeviceIDs
Engineering-NY,0cbe9368-402d-41c3-b75b-175481589999 0cbe9368-402d-41c3-b75b-175481588888
Sales-NY,0c4ec369-b128-4b4d-aec2-ec283f849999 0c4ec369-b128-4b4d-aec2-ec283f848888
Engineering-NJ,0cbe9368-402d-41c3-b75b-175481589999 0cbe9368-402d-41c3-b75b-175481588888
Sales-NJ,0c4ec369-b128-4b4d-aec2-ec283f849999 0c4ec369-b128-4b4d-aec2-ec283f848888
...

*****
First Form Users
*****

<UserTypeEntity> ::=
		(all users)|
		(user <UserItem>)|
		(users <UserList>)|
		(group <GroupItem)|
		(ou|org <OrgUnitPath)|
		(ou_and_children|ou_and_child <OrgUnitPath>)|
		(courseparticipants <CourseID>)|
		(students <CourseID>)|
		(teachers <CourseID>)|
		(file <FileName> [charset <Charset>] [delimiter <String>])|
		(csvfile <FileName>:<FieldName> [charset <Charset>] [delimiter <String>])|
		(license|licenses|licence|licences <SKUIDList>)|
		(query <QueryUser>)|
		(groups <GroupList)|
		(ous|orgs <OrgUnitList)|
		(ous_and_children|ous_and_child <OrgUnitList)|
		(courseparticipants <CourseIDList>)|
		(students <CourseIDList>)|
		(teachers <CourseIDList>)|
		(datafile users|groups|ous|ous_and_children|courseparticipants|students|teachers <FileName> [charset <Charset>] [delimiter <String>])|
		(csvkmd users|groups|ous|ous_and_children|courseparticipants|students|teachers <FileName> [charset <Charset>]
			keyfield <FieldName> [delimiter <String>]
			[matchfield <FieldName> <RegularExpression>]
			[datafield <FieldName> [delimiter <String>]])|
		(csvdata <FieldName>)

For Users, the lists can be users or objects that specify users, e.g., Groups or Organizational Units.

Selection: all users
Note: All Users in the account

Selection: file <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
If delimiter <String> is specified, each row can contain a list of items separated by <String>, typically comma or space.
Yields: A list of Users.
Example: file UserFile.lst
UserFile.lst contains:
user1@example.com
user2@example.com

Selection: csvfile <FileName>:<FieldName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a CSV file with a header row; <FieldName> specifies the column containing the desired data.
If delimiter <String> is specified, each the specified column in each row can contain a list of items spearated by <String>, typically comma or space.
Yields: A list of Users.
Example: csvfile UserFile.csv:primaryEmail
UserFile.csv contains:
primaryEmail
user1@example.com
user2@example.com

Selection: license|licenses <SKUIDList>
Note: <SKUIDList> is a comma separated list of SKU IDs surrounded by " (a single command line argument).
Yields: All Users that possess one of the specified licenses.
Example: licenses "200gb,400gb"

Selection: query <Query>
Note: <Query> should be surrounded by ", ' should be used to enclose items within <Query>.
Yields: All users that satisfy the query.
Example: query "givenName='Jane'"
See: https://developers.google.com/admin-sdk/directory/v1/guides/search-users

Selection: user <UserItem>
Yields: A single User.
Example: user user@example.com

Selection: group <GroupItem>
Yields: All Users in the group.
Example: group group@example.com

Selection: org|ou <OrgUnitPath>
Note: <OrgUnitPath> should be enclosed in " if it contains spaces.
Yields: All Users directly in the Organizational Unit. 
Example: org "/Staff/New York"

Selection: ou_and_children|ou_and_child <OrgUnitPath>
Note: <OrgUnitPath> should be enclosed in " if it contains spaces.
Yields: All Users in the Organizational Unit and any sub units.
Example: ou_and_children /Staff

Selection: users <UserList>
Note: <UserList> is a comma separated list of <UserItem> surrounded by " (a single command line argument).
Yields: A list of Users.
Example: users "user1@example.com,user2@example.com"

Selection: groups <GroupList>
Note: <GroupList> is a comma separated list of <GroupItem> surrounded by " (a single command line argument).
Yields: All Users from all of the groups.
Example: groups "group1@example.com,group2@example.com"

Selection: orgs|ous <OrgUnitList>
Note: <OrgUnitList> is a comma separated list of <OrgUnitPath> surrounded by " (a single command line argument).
An individual <OrgUnitPath> should be surrounded by ' if it contains spaces.
Yields: All Users directly in the Organizational Units. 
Example: orgs "'/Staff/New York','/Staff/New Jersey'"

Selection: ous_and_children|ous_and_child <OrgUnitList>
Note: <OrgUnitList> is a comma separated list of <OrgUnitPath> surrounded by " (a single command line argument).
An individual <OrgUnitPath> should be surrounded by ' if it contains spaces.
Yields: All Users in the Organizational Units and their sub units. 
Example: ous_and_children "'/Staff/New York','/Staff/New Jersey'"

Selection: datafile users <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
Yields: A list of Users.
Example: datafile users UserFile.lst
UserFile.lst contains:
user1@example.com
user2@example.com

Selection: datafile groups <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
Yields: All Users from all of the groups.
Example: datafile groups GroupFile.lst
GroupFile.lst contains:
group1@example.com
group2@example.com
...

Selection: datafile orgs|ous <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
Yields: All Users directly in the Organizational Units. 
Example: datafile orgs OrgsFile.lst
OrgsFile.lst contains:
/Staff/New York
/Staff/New Jersey
...

Selection: datafile ous_and_children|ous_and_child <FileName> [charset <Charset>] [delimiter <String>]
Note: <FileName> specifies a flat file with no header row.
Yields: All Users in the Organizational Units and their sub units. 
Example: datafile ous_and_children OrgsFile.lst
OrgsFile.lst contains:
/Staff/New York
/Staff/New Jersey
...

Selection: csvkmd users <FileName> [charset <Charset>]
		keyfield <FieldName> [delimiter <String>]
		[matchfield <FieldName> <RegularExpression>]
		[datafield <FieldName> [delimiter <String>]]
Note: <FileName> specifies a CSV file, <FieldName>, <FieldName> and <FieldName> are values in the first row that select specific columns.
Yields: A list of Users.
The columns are separated by commas. If a keyfield or datafield contains multiple values, delimiter <String> specifies the character that separates the values within a column.
The keyfield <FieldName> column contains <UserItems>.
The matchfield <FieldName> column contains data that may be used to select a subset of the rows in the CSV file.
The datafield <FieldName> column selects data that will be used elsewhere in the command.
<RegularExpression> is a Python regular expression, see: https://docs.python.org/2/library/re.html

Example: csvkmd users UserFile.csv keyfield Email matchfield Office "New York"
userFile.csv contains:
Office,Email
New York,user1@example.com
New York,user2@example.com
...

Example: csvkmd users UserFile.csv keyfield Emails delimiter " " matchfield Office "Sales-.*"
UserFile.csv contains:
Office,Emails
Engineering-NY,user1@example.com user2@example.com
Sales-NY,user13@example.com user4@example.com
Engineering-NJ,user15example.com user6@example.com
Sales-NJ,user7@example.com user8@example.com
...

Selection: csvkmd groups <FileName> [charset <Charset>]
		keyfield <FieldName> [delimiter <String>]
		[matchfield <FieldName> <RegularExpression>]
		[datafield <FieldName> [delimiter <String>]]
Note: <FileName> specifies a CSV file, <FieldName>, <FieldName> and <FieldName> are values in the first row that select specific columns.
Yields: All Users from the groups.
The columns are separated by commas. If a keyfield or datafield contains multiple values, delimiter <String> specifies the character that separates the values within a column.
The keyfield <FieldName> column contains <GroupItems>.
The matchfield <FieldName> column contains data that may be used to select a subset of the rows in the CSV file.
The datafield <FieldName> column selects data that will be used elsewhere in the command.
<RegularExpression> is a Python regular expression, see: https://docs.python.org/2/library/re.html

Selection: csvkmd orgs|ous <FileName> [charset <Charset>]
		keyfield <FieldName> [delimiter <String>]
		[matchfield <FieldName> <RegularExpression>]
		[datafield <FieldName> [delimiter <String>]]
Note: <FileName> specifies a CSV file, <FieldName>, <FieldName> and <FieldName> are values in the first row that select specific columns.
Yields: All Users directly in the Organizational Units. 
The columns are separated by commas. If a keyfield or datafield contains multiple values, delimiter <String> specifies the character that separates the values within a column.
The keyfield <FieldName> column contains <OrgUnitPaths>.
The matchfield <FieldName> column contains data that may be used to select a subset of the rows in the CSV file.
The datafield <FieldName> column selects data that will be used elsewhere in the command.
<RegularExpression> is a Python regular expression, see: https://docs.python.org/2/library/re.html

Selection: csvkmd ous_and_children|ous_and_child <FileName> [charset <Charset>]
		keyfield <FieldName> [delimiter <String>]
		[matchfield <FieldName> <RegularExpression>]
		[datafield <FieldName> [delimiter <String>]]
Note: <FileName> specifies a CSV file, <FieldName>, <FieldName> and <FieldName> are values in the first row that select specific columns.
Yields: All Users in the Organizational Units and their sub units. 
The columns are separated by commas. If a keyfield or datafield contains multiple values, delimiter <String> specifies the character that separates the values within a column.
The keyfield <FieldName> column contains <OrgUnitPaths>.
The matchfield <FieldName> column contains data that may be used to select a subset of the rows in the CSV file.
The datafield <FieldName> column selects data that will be used elsewhere in the command.
<RegularExpression> is a Python regular expression, see: https://docs.python.org/2/library/re.html

*****
Second Form Organizational Units, ChromeOS Devices
*****

gam update orgs <OrgUnitEntity> add|move <CrOSTypeEntity>

Situation 1:
You have a flat file CrOSList.txt with these lines:
xxxxxxxx-d6cc-40c7-b8b5-0ee760c9762d
yyyyyyyy-8b4b-4baf-aea4-898bf8b4fe2e
...

You want to add them to the /Test Org Unit.
	gam update orgs /Test add datafile cros CrOSList.txt

Situation 2:
You have a CSV file OrgCrOSList.csv with these lines:
OU,CrOS
/Test,xxxxxxxx-d6cc-40c7-b8b5-0ee760c9762d
/Test,yyyyyyyy-8b4b-4baf-aea4-898bf8b4fe2e
/Prod,xxxxxxxx-a9d8-44f2-85d2-5d6da2e84046
/Prod,yyyyyyyy-59cb-4b8f-82bc-986f9c808db2
...

Example 1, add new devices to the /Test Org Unit.
Method 1a: Specify the Org Unit directly, select the desired ChromeOS devices from the CSV file by specifying the keyfield and matchfield,
	gam update orgs /Test add csvkmd cros OrgCrOSList.csv keyfield CrOS matchfield OU "/Test"
Method 1b: Specify the Org Unit with the keyfield and matchfield, select the desired ChromeOS devices with the datafield.
	gam update orgs csvkmd OrgCrOSList.csv keyfield OU matchfield OU "/Test" datafield CrOS add csvcros CrOS

Example 2, add new devices to all of the Org Units.
	gam update orgs csvkmd OrgCrOSList.csv keyfield OU datafield CrOS cros add csvcros CrOS

*****
Second Form Organizational Units, Users
*****

gam update orgs <OrgUnitEntity> add|move <UserTypeEntity>

Situation 1:
You have a flat file UserList.txt with these lines:
bob@example.com
carol@example.com
...

You want to add them to the /Staff Org Unit.
	gam update orgs /Staff add datafile user UserList.txt

Situation 2:
You have a CSV file OrgUserList.csv with these lines:
OU,User
/Staff,bob@example.com
/Staff,carol@example.com
/Prod,ted@example.com
/Prod,alice@example.com
...

Example 1, add new users to the /Staff Org Unit. 
Method 1a: Specify the Org Unit directly, select the desired Users from the CSV file by specifying the keyfield and matchfield,
	gam update orgs /Staff add csvkmd user OrgUserList.csv keyfield User matchfield OU "/Staff"
Method 1b: Specify the Org Unit with the keyfield and matchfield, select the desired Users with the datafield.
	gam update orgs csvkmd OrgUserList.csv keyfield OU matchfield OU "/Staff" datafield User add csvdata User

Example 2, add new users to all of the Org Units.
	gam update orgs csvkmd OrgUserList.csv keyfield OU datafield User cros add csvdata User

*****
Second Form Groups
*****

gam update groups <GroupEntity> add|remove|sync member <UserTypeEntity>

You want to update the membership of your groups.

Situation 1:
You have a CSV file GroupUserList.csv with these lines:
Group,UserList
firstgrade,billyfirst emilyfirst ...
secondgrade,sallysecond tommysecond ...
artclub,billyfirst,sallysecond ...
...

Gam csv command method
	gam csv GroupUserList.csv gam update group ~Group sync member users "~UserList"
If M is the number of grades, there will be M gam subprocesses run for the command.

Data selection method
	gam update groups csvkmd GroupUserList.csv keyField Group datafield UserList delimiter " " sync member csvdata UserList
There is only 1 gam process run.

Verify data selection
	gam list csvkmd GroupUserList.csv keyField Group datafield UserList delimiter " " data csvdata UserList delimiter " "
Group,UserList
firstgrade@example.com,"billyfirst@example.com emilyfirst@example.com"
secondgrade@example.com,"sallysecond@example.com tommysecond@example.com"
artclub@example.com,billyfirst@example.com


Situation 2:
You have a csv file UserGroupList.csv with these lines:
User,GroupList
billyfirst,firstgrade artclub
emilyfirst,firstgrade
sallysecond,secondgrade artclub
tommysecond,secondgrade
...

Gam csv command method
	Gam can not process this data directly, you will have to preprocess UserGroupList.csv
into GroupUserList.csv and use the commands in Situation 1.

Data selection method
	gam update groups csvkmd UserGroupList.csv keyField GroupList delimiter " " datafield User sync member csvdata User

Verify data selection
	gam list csvkmd UserGroupList.csv keyField GroupList delimiter " " datafield User data csvdata User delimiter ","
GroupList,User
firstgrade@rdschool.org,"billyfirst@rdschool.org,emilyfirst@rdschool.org"
secondgrade@rdschool.org,"sallysecond@rdschool.org,tommysecond@rdschool.org"
artclub@rdschool.org,"billyfirst@rdschool.org,sallysecond@rdschool.org"

*****
Second Form Courses
*****


*****
Third Form Users
*****

The gam print users command can print all users or those users matching a query; GAM4 extends this with the same collection
choices as in the First Form Users section above.
	gam print users ... select <UserTypeEntity>

For example, to print all users in the Sales and Marketing groups, you would say:
	gam print users select groups Sales,Marketing

*****
Third Form Groups
*****

The gam print groups command can print all groups or those groups matching a query; GAM4 extends this by allowing lists of groups.
	gam print groups ... select <GroupEntity>

For example, to print all groups listed in Group column of the CSV file Groups.csv, you would say:
	gam print users select csvfile Groups.csv:Group

*****
Third Form Group Members
*****

The gam print group-members command can print members from all groups or those members from a single group; GAM4 extends this
by allowing lists of groups.
	gam print group-members ... select <GroupEntity>

For example, to print all members in the Sales and Marketing groups, you would say:
	gam print group-members select Sales,Marketing

